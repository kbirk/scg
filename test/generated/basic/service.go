// Code generated by scg. DO NOT EDIT.
//
// Version: 0.0.1
//
// Source: service.scg
//
// SHA: 95370da698f08efa7de1faafeafbb2e5add3dce686b6630efc6a4e8780bcde83
//
// Date: 2024-06-08T14:58:32-04:00

package basic

import (
	"context"
	"fmt"

	"github.com/kbirk/scg/pkg/rpc"
	"github.com/kbirk/scg/pkg/serialize"
)

const (
	benchMarkerID   uint64 = 12718847981088567323
	benchy_BenchyID uint64 = 3270730121291559072
)

type BenchMarkerServer interface {
	Benchy(context.Context, *BasicStruct) (*ComplicatedStruct, error)
}

func RegisterBenchMarkerServer(server *rpc.Server, benchMarkerServer BenchMarkerServer) {
	server.RegisterServer(benchMarkerID, &benchMarker_Stub{benchMarkerServer})
}

type benchMarker_Stub struct {
	server BenchMarkerServer
}

func (s *benchMarker_Stub) handleBenchy(ctx context.Context, requestID uint64, reader *serialize.Reader) []byte {
	req := &BasicStruct{}
	err := req.Deserialize(reader)
	if err != nil {
		return rpc.RespondWithError(requestID, err)
	}

	resp, err := s.server.Benchy(ctx, req)
	if err != nil {
		return rpc.RespondWithError(requestID, err)
	}

	return rpc.RespondWithMessage(requestID, resp)
}

func (s *benchMarker_Stub) HandleWrapper(ctx context.Context, requestID uint64, reader *serialize.Reader) []byte {
	var methodID uint64
	err := serialize.DeserializeUInt64(&methodID, reader)
	if err != nil {
		return rpc.RespondWithError(requestID, err)
	}

	switch methodID {
	case benchy_BenchyID:
		return s.handleBenchy(ctx, requestID, reader)
	default:
		return rpc.RespondWithError(requestID, fmt.Errorf("unrecognized methodID %d", methodID))
	}
}

type BenchMarkerClient struct {
	client *rpc.Client
}

func NewBenchMarkerClient(client *rpc.Client) *BenchMarkerClient {
	return &BenchMarkerClient{
		client: client,
	}
}

func (c *BenchMarkerClient) Benchy(ctx context.Context, req *BasicStruct) (*ComplicatedStruct, error) {
	reader, err := c.client.Call(ctx, benchMarkerID, benchy_BenchyID, req)
	if err != nil {
		return nil, err
	}

	resp := &ComplicatedStruct{}
	err = resp.Deserialize(reader)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
