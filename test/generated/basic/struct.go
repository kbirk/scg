// Code generated by scg. DO NOT EDIT.
//
// Version: 0.0.1
//
// Source: struct.scg
//
// SHA: ab5a13c72249e4561d0c95b2539d0ffd193d4f318fa882a9aef1ce8b91d4d9f8
//
// Date: 2024-06-08T14:58:32-04:00

package basic

import (
	"encoding/json"

	"github.com/kbirk/scg/pkg/serialize"
)

type BasicStruct struct {
	ValUint8            uint8              `json:"val_uint_8"`
	ValInt8             int8               `json:"val_int_8"`
	ValUint16           uint16             `json:"val_uint_16"`
	ValInt16            int16              `json:"val_int_16"`
	ValUint32           uint32             `json:"val_uint_32"`
	ValInt32            int32              `json:"val_int_32"`
	ValUint64           uint64             `json:"val_uint_64"`
	ValInt64            int64              `json:"val_int_64"`
	ValString           string             `json:"val_string"`
	ValArrayString      []string           `json:"val_array_string"`
	ValMapStringFloat32 map[string]float32 `json:"val_map_string_float_32"`
}

func (b *BasicStruct) ToJSON() ([]byte, error) {
	jsonData, err := json.Marshal(b)
	if err != nil {
		return nil, err
	}
	return jsonData, nil
}

func (b *BasicStruct) FromJSON(data []byte) error {
	err := json.Unmarshal(data, b)
	if err != nil {
		return err
	}
	return nil
}

func (b *BasicStruct) ToBytes() []byte {
	size := b.CalcByteSize()
	writer := serialize.NewFixedSizeWriter(size)
	b.Serialize(writer)
	return writer.Bytes()
}

func (b *BasicStruct) FromBytes(bs []byte) error {
	return b.Deserialize(serialize.NewReader(bs))
}

func (b *BasicStruct) ByteSize() int {
	return b.CalcByteSize()
}

func basicStruct_CalcByteSizeListString(arg []string) int {
	size := 4
	for _, v := range arg {
		size += serialize.CalcByteSizeString(v)
	}
	return size
}

func basicStruct_CalcByteSizeMapStringFloat32(arg map[string]float32) int {
	size := 4
	for k, v := range arg {
		size += serialize.CalcByteSizeString(k) + serialize.CalcByteSizeFloat32(v)
	}
	return size
}

func (b *BasicStruct) CalcByteSize() int {
	size := 0
	size += serialize.CalcByteSizeUInt8(b.ValUint8)
	size += serialize.CalcByteSizeInt8(b.ValInt8)
	size += serialize.CalcByteSizeUInt16(b.ValUint16)
	size += serialize.CalcByteSizeInt16(b.ValInt16)
	size += serialize.CalcByteSizeUInt32(b.ValUint32)
	size += serialize.CalcByteSizeInt32(b.ValInt32)
	size += serialize.CalcByteSizeUInt64(b.ValUint64)
	size += serialize.CalcByteSizeInt64(b.ValInt64)
	size += serialize.CalcByteSizeString(b.ValString)
	size += basicStruct_CalcByteSizeListString(b.ValArrayString)
	size += basicStruct_CalcByteSizeMapStringFloat32(b.ValMapStringFloat32)
	return size
}

func basicStruct_SerializeListString(writer *serialize.FixedSizeWriter, arg []string) error {
	serialize.SerializeUInt32(writer, uint32(len(arg)))
	for _, v := range arg {
		serialize.SerializeString(writer, v)
	}
	return nil
}

func basicStruct_SerializeMapStringFloat32(writer *serialize.FixedSizeWriter, arg map[string]float32) error {
	serialize.SerializeUInt32(writer, uint32(len(arg)))
	for k, v := range arg {
		serialize.SerializeString(writer, k)
		serialize.SerializeFloat32(writer, v)
	}
	return nil
}

func (b *BasicStruct) Serialize(writer *serialize.FixedSizeWriter) {

	serialize.SerializeUInt8(writer, b.ValUint8)
	serialize.SerializeInt8(writer, b.ValInt8)
	serialize.SerializeUInt16(writer, b.ValUint16)
	serialize.SerializeInt16(writer, b.ValInt16)
	serialize.SerializeUInt32(writer, b.ValUint32)
	serialize.SerializeInt32(writer, b.ValInt32)
	serialize.SerializeUInt64(writer, b.ValUint64)
	serialize.SerializeInt64(writer, b.ValInt64)
	serialize.SerializeString(writer, b.ValString)
	basicStruct_SerializeListString(writer, b.ValArrayString)
	basicStruct_SerializeMapStringFloat32(writer, b.ValMapStringFloat32)
}

func basicStruct_DeserializeListString(arg *[]string, reader *serialize.Reader) error {
	var length uint32
	err := serialize.DeserializeUInt32(&length, reader)
	if err != nil {
		return err
	}

	*arg = make([]string, int(length))

	for i := 0; i < int(length); i++ {
		var v string
		err := serialize.DeserializeString(&v, reader)
		if err != nil {
			return err
		}
		(*arg)[i] = v
	}
	return nil
}

func basicStruct_DeserializeMapStringFloat32(arg *map[string]float32, reader *serialize.Reader) error {
	var length uint32
	err := serialize.DeserializeUInt32(&length, reader)
	if err != nil {
		return err
	}

	*arg = make(map[string]float32, int(length))

	for i := 0; i < int(length); i++ {
		var k string
		var v float32
		err := serialize.DeserializeString(&k, reader)
		if err != nil {
			return err
		}
		err = serialize.DeserializeFloat32(&v, reader)
		if err != nil {
			return err
		}
		(*arg)[k] = v
	}
	return nil
}

func (b *BasicStruct) Deserialize(reader *serialize.Reader) error {
	var err error
	err = serialize.DeserializeUInt8(&b.ValUint8, reader)
	if err != nil {
		return err
	}
	err = serialize.DeserializeInt8(&b.ValInt8, reader)
	if err != nil {
		return err
	}
	err = serialize.DeserializeUInt16(&b.ValUint16, reader)
	if err != nil {
		return err
	}
	err = serialize.DeserializeInt16(&b.ValInt16, reader)
	if err != nil {
		return err
	}
	err = serialize.DeserializeUInt32(&b.ValUint32, reader)
	if err != nil {
		return err
	}
	err = serialize.DeserializeInt32(&b.ValInt32, reader)
	if err != nil {
		return err
	}
	err = serialize.DeserializeUInt64(&b.ValUint64, reader)
	if err != nil {
		return err
	}
	err = serialize.DeserializeInt64(&b.ValInt64, reader)
	if err != nil {
		return err
	}
	err = serialize.DeserializeString(&b.ValString, reader)
	if err != nil {
		return err
	}
	err = basicStruct_DeserializeListString(&b.ValArrayString, reader)
	if err != nil {
		return err
	}
	err = basicStruct_DeserializeMapStringFloat32(&b.ValMapStringFloat32, reader)
	if err != nil {
		return err
	}
	return nil
}

type ComplicatedStruct struct {
	StructAMap   map[string]StructA `json:"struct_a_map"`
	StructBArray []StructB          `json:"struct_b_array"`
}

func (c *ComplicatedStruct) ToJSON() ([]byte, error) {
	jsonData, err := json.Marshal(c)
	if err != nil {
		return nil, err
	}
	return jsonData, nil
}

func (c *ComplicatedStruct) FromJSON(data []byte) error {
	err := json.Unmarshal(data, c)
	if err != nil {
		return err
	}
	return nil
}

func (c *ComplicatedStruct) ToBytes() []byte {
	size := c.CalcByteSize()
	writer := serialize.NewFixedSizeWriter(size)
	c.Serialize(writer)
	return writer.Bytes()
}

func (c *ComplicatedStruct) FromBytes(bs []byte) error {
	return c.Deserialize(serialize.NewReader(bs))
}

func (c *ComplicatedStruct) ByteSize() int {
	return c.CalcByteSize()
}

func complicatedStruct_CalcByteSizeListStructB(arg []StructB) int {
	size := 4
	for _, v := range arg {
		size += v.CalcByteSize()
	}
	return size
}

func complicatedStruct_CalcByteSizeMapStringStructA(arg map[string]StructA) int {
	size := 4
	for k, v := range arg {
		size += serialize.CalcByteSizeString(k) + v.CalcByteSize()
	}
	return size
}

func (c *ComplicatedStruct) CalcByteSize() int {
	size := 0
	size += complicatedStruct_CalcByteSizeMapStringStructA(c.StructAMap)
	size += complicatedStruct_CalcByteSizeListStructB(c.StructBArray)
	return size
}

func complicatedStruct_SerializeListStructB(writer *serialize.FixedSizeWriter, arg []StructB) error {
	serialize.SerializeUInt32(writer, uint32(len(arg)))
	for _, v := range arg {
		v.Serialize(writer)
	}
	return nil
}

func complicatedStruct_SerializeMapStringStructA(writer *serialize.FixedSizeWriter, arg map[string]StructA) error {
	serialize.SerializeUInt32(writer, uint32(len(arg)))
	for k, v := range arg {
		serialize.SerializeString(writer, k)
		v.Serialize(writer)
	}
	return nil
}

func (c *ComplicatedStruct) Serialize(writer *serialize.FixedSizeWriter) {

	complicatedStruct_SerializeMapStringStructA(writer, c.StructAMap)
	complicatedStruct_SerializeListStructB(writer, c.StructBArray)
}

func complicatedStruct_DeserializeListStructB(arg *[]StructB, reader *serialize.Reader) error {
	var length uint32
	err := serialize.DeserializeUInt32(&length, reader)
	if err != nil {
		return err
	}

	*arg = make([]StructB, int(length))

	for i := 0; i < int(length); i++ {
		var v StructB
		err := v.Deserialize(reader)
		if err != nil {
			return err
		}
		(*arg)[i] = v
	}
	return nil
}

func complicatedStruct_DeserializeMapStringStructA(arg *map[string]StructA, reader *serialize.Reader) error {
	var length uint32
	err := serialize.DeserializeUInt32(&length, reader)
	if err != nil {
		return err
	}

	*arg = make(map[string]StructA, int(length))

	for i := 0; i < int(length); i++ {
		var k string
		var v StructA
		err := serialize.DeserializeString(&k, reader)
		if err != nil {
			return err
		}
		err = v.Deserialize(reader)
		if err != nil {
			return err
		}
		(*arg)[k] = v
	}
	return nil
}

func (c *ComplicatedStruct) Deserialize(reader *serialize.Reader) error {
	var err error
	err = complicatedStruct_DeserializeMapStringStructA(&c.StructAMap, reader)
	if err != nil {
		return err
	}
	err = complicatedStruct_DeserializeListStructB(&c.StructBArray, reader)
	if err != nil {
		return err
	}
	return nil
}

type StructA struct {
	ValInt8           int8             `json:"val_int_8"`
	ValFloat32        float32          `json:"val_float_32"`
	ValBool           bool             `json:"val_bool"`
	ValMapUint8String map[uint8]string `json:"val_map_uint8_string"`
}

func (s *StructA) ToJSON() ([]byte, error) {
	jsonData, err := json.Marshal(s)
	if err != nil {
		return nil, err
	}
	return jsonData, nil
}

func (s *StructA) FromJSON(data []byte) error {
	err := json.Unmarshal(data, s)
	if err != nil {
		return err
	}
	return nil
}

func (s *StructA) ToBytes() []byte {
	size := s.CalcByteSize()
	writer := serialize.NewFixedSizeWriter(size)
	s.Serialize(writer)
	return writer.Bytes()
}

func (s *StructA) FromBytes(bs []byte) error {
	return s.Deserialize(serialize.NewReader(bs))
}

func (s *StructA) ByteSize() int {
	return s.CalcByteSize()
}

func structA_CalcByteSizeMapUInt8String(arg map[uint8]string) int {
	size := 4
	for k, v := range arg {
		size += serialize.CalcByteSizeUInt8(k) + serialize.CalcByteSizeString(v)
	}
	return size
}

func (s *StructA) CalcByteSize() int {
	size := 0
	size += serialize.CalcByteSizeInt8(s.ValInt8)
	size += serialize.CalcByteSizeFloat32(s.ValFloat32)
	size += serialize.CalcByteSizeBool(s.ValBool)
	size += structA_CalcByteSizeMapUInt8String(s.ValMapUint8String)
	return size
}

func structA_SerializeMapUInt8String(writer *serialize.FixedSizeWriter, arg map[uint8]string) error {
	serialize.SerializeUInt32(writer, uint32(len(arg)))
	for k, v := range arg {
		serialize.SerializeUInt8(writer, k)
		serialize.SerializeString(writer, v)
	}
	return nil
}

func (s *StructA) Serialize(writer *serialize.FixedSizeWriter) {

	serialize.SerializeInt8(writer, s.ValInt8)
	serialize.SerializeFloat32(writer, s.ValFloat32)
	serialize.SerializeBool(writer, s.ValBool)
	structA_SerializeMapUInt8String(writer, s.ValMapUint8String)
}

func structA_DeserializeMapUInt8String(arg *map[uint8]string, reader *serialize.Reader) error {
	var length uint32
	err := serialize.DeserializeUInt32(&length, reader)
	if err != nil {
		return err
	}

	*arg = make(map[uint8]string, int(length))

	for i := 0; i < int(length); i++ {
		var k uint8
		var v string
		err := serialize.DeserializeUInt8(&k, reader)
		if err != nil {
			return err
		}
		err = serialize.DeserializeString(&v, reader)
		if err != nil {
			return err
		}
		(*arg)[k] = v
	}
	return nil
}

func (s *StructA) Deserialize(reader *serialize.Reader) error {
	var err error
	err = serialize.DeserializeInt8(&s.ValInt8, reader)
	if err != nil {
		return err
	}
	err = serialize.DeserializeFloat32(&s.ValFloat32, reader)
	if err != nil {
		return err
	}
	err = serialize.DeserializeBool(&s.ValBool, reader)
	if err != nil {
		return err
	}
	err = structA_DeserializeMapUInt8String(&s.ValMapUint8String, reader)
	if err != nil {
		return err
	}
	return nil
}

type StructB struct {
	ValArrayInt                []int32                   `json:"val_array_int"`
	ValMapStringInt            map[string]int32          `json:"val_map_string_int"`
	ValMapUint8MapUint16String map[int8]map[int16]string `json:"val_map_uint8_map_uint16_string"`
}

func (s *StructB) ToJSON() ([]byte, error) {
	jsonData, err := json.Marshal(s)
	if err != nil {
		return nil, err
	}
	return jsonData, nil
}

func (s *StructB) FromJSON(data []byte) error {
	err := json.Unmarshal(data, s)
	if err != nil {
		return err
	}
	return nil
}

func (s *StructB) ToBytes() []byte {
	size := s.CalcByteSize()
	writer := serialize.NewFixedSizeWriter(size)
	s.Serialize(writer)
	return writer.Bytes()
}

func (s *StructB) FromBytes(bs []byte) error {
	return s.Deserialize(serialize.NewReader(bs))
}

func (s *StructB) ByteSize() int {
	return s.CalcByteSize()
}

func structB_CalcByteSizeListInt32(arg []int32) int {
	size := 4
	for _, v := range arg {
		size += serialize.CalcByteSizeInt32(v)
	}
	return size
}

func structB_CalcByteSizeMapInt16String(arg map[int16]string) int {
	size := 4
	for k, v := range arg {
		size += serialize.CalcByteSizeInt16(k) + serialize.CalcByteSizeString(v)
	}
	return size
}

func structB_CalcByteSizeMapInt8MapInt16String(arg map[int8]map[int16]string) int {
	size := 4
	for k, v := range arg {
		size += serialize.CalcByteSizeInt8(k) + structB_CalcByteSizeMapInt16String(v)
	}
	return size
}

func structB_CalcByteSizeMapStringInt32(arg map[string]int32) int {
	size := 4
	for k, v := range arg {
		size += serialize.CalcByteSizeString(k) + serialize.CalcByteSizeInt32(v)
	}
	return size
}

func (s *StructB) CalcByteSize() int {
	size := 0
	size += structB_CalcByteSizeListInt32(s.ValArrayInt)
	size += structB_CalcByteSizeMapStringInt32(s.ValMapStringInt)
	size += structB_CalcByteSizeMapInt8MapInt16String(s.ValMapUint8MapUint16String)
	return size
}

func structB_SerializeListInt32(writer *serialize.FixedSizeWriter, arg []int32) error {
	serialize.SerializeUInt32(writer, uint32(len(arg)))
	for _, v := range arg {
		serialize.SerializeInt32(writer, v)
	}
	return nil
}

func structB_SerializeMapInt16String(writer *serialize.FixedSizeWriter, arg map[int16]string) error {
	serialize.SerializeUInt32(writer, uint32(len(arg)))
	for k, v := range arg {
		serialize.SerializeInt16(writer, k)
		serialize.SerializeString(writer, v)
	}
	return nil
}

func structB_SerializeMapInt8MapInt16String(writer *serialize.FixedSizeWriter, arg map[int8]map[int16]string) error {
	serialize.SerializeUInt32(writer, uint32(len(arg)))
	for k, v := range arg {
		serialize.SerializeInt8(writer, k)
		structB_SerializeMapInt16String(writer, v)
	}
	return nil
}

func structB_SerializeMapStringInt32(writer *serialize.FixedSizeWriter, arg map[string]int32) error {
	serialize.SerializeUInt32(writer, uint32(len(arg)))
	for k, v := range arg {
		serialize.SerializeString(writer, k)
		serialize.SerializeInt32(writer, v)
	}
	return nil
}

func (s *StructB) Serialize(writer *serialize.FixedSizeWriter) {

	structB_SerializeListInt32(writer, s.ValArrayInt)
	structB_SerializeMapStringInt32(writer, s.ValMapStringInt)
	structB_SerializeMapInt8MapInt16String(writer, s.ValMapUint8MapUint16String)
}

func structB_DeserializeListInt32(arg *[]int32, reader *serialize.Reader) error {
	var length uint32
	err := serialize.DeserializeUInt32(&length, reader)
	if err != nil {
		return err
	}

	*arg = make([]int32, int(length))

	for i := 0; i < int(length); i++ {
		var v int32
		err := serialize.DeserializeInt32(&v, reader)
		if err != nil {
			return err
		}
		(*arg)[i] = v
	}
	return nil
}

func structB_DeserializeMapInt16String(arg *map[int16]string, reader *serialize.Reader) error {
	var length uint32
	err := serialize.DeserializeUInt32(&length, reader)
	if err != nil {
		return err
	}

	*arg = make(map[int16]string, int(length))

	for i := 0; i < int(length); i++ {
		var k int16
		var v string
		err := serialize.DeserializeInt16(&k, reader)
		if err != nil {
			return err
		}
		err = serialize.DeserializeString(&v, reader)
		if err != nil {
			return err
		}
		(*arg)[k] = v
	}
	return nil
}

func structB_DeserializeMapInt8MapInt16String(arg *map[int8]map[int16]string, reader *serialize.Reader) error {
	var length uint32
	err := serialize.DeserializeUInt32(&length, reader)
	if err != nil {
		return err
	}

	*arg = make(map[int8]map[int16]string, int(length))

	for i := 0; i < int(length); i++ {
		var k int8
		var v map[int16]string
		err := serialize.DeserializeInt8(&k, reader)
		if err != nil {
			return err
		}
		err = structB_DeserializeMapInt16String(&v, reader)
		if err != nil {
			return err
		}
		(*arg)[k] = v
	}
	return nil
}

func structB_DeserializeMapStringInt32(arg *map[string]int32, reader *serialize.Reader) error {
	var length uint32
	err := serialize.DeserializeUInt32(&length, reader)
	if err != nil {
		return err
	}

	*arg = make(map[string]int32, int(length))

	for i := 0; i < int(length); i++ {
		var k string
		var v int32
		err := serialize.DeserializeString(&k, reader)
		if err != nil {
			return err
		}
		err = serialize.DeserializeInt32(&v, reader)
		if err != nil {
			return err
		}
		(*arg)[k] = v
	}
	return nil
}

func (s *StructB) Deserialize(reader *serialize.Reader) error {
	var err error
	err = structB_DeserializeListInt32(&s.ValArrayInt, reader)
	if err != nil {
		return err
	}
	err = structB_DeserializeMapStringInt32(&s.ValMapStringInt, reader)
	if err != nil {
		return err
	}
	err = structB_DeserializeMapInt8MapInt16String(&s.ValMapUint8MapUint16String, reader)
	if err != nil {
		return err
	}
	return nil
}
