

// Code generated by scg. DO NOT EDIT.
//
// Version: 0.0.1
//
// Source: service.scg
//
// SHA: 95370da698f08efa7de1faafeafbb2e5add3dce686b6630efc6a4e8780bcde83
//
// Date: 2024-06-08T14:58:32-04:00

#pragma once

#include <scg/client.h>
#include <scg/serialize.h>
#include "struct.h"

namespace basic { 


static constexpr uint64_t benchMarkerID = 12718847981088567323UL;
static constexpr uint64_t benchy_BenchyID = 3270730121291559072UL;

class BenchMarkerClient {
public:
	inline explicit
	BenchMarkerClient(std::shared_ptr<scg::rpc::Client> client) : client_(client) {}
	
	inline std::pair<ComplicatedStruct, scg::error::Error> benchy(const scg::context::Context& ctx, const BasicStruct& req) const
	{
		std::pair<ComplicatedStruct, scg::error::Error> res;

		auto [reader, err] = client_->call(ctx, benchMarkerID, benchy_BenchyID, req);
		if (err) {
			res.second = err;
			return res;
		}

		err = res.first.deserialize(reader);
		if (err) {
			res.second = err;
			return res;
		}

		return res;
	}

	inline scg::error::Error benchy(ComplicatedStruct* resp, const scg::context::Context& ctx, const BasicStruct& req) const
	{
		auto [reader, err] = client_->call(ctx, benchMarkerID, benchy_BenchyID, req);
		if (err) {
			return err;
		}

		return resp->deserialize(reader);
	}
	

private:
	std::shared_ptr<scg::rpc::Client> client_;
};

} 
