// Code generated by scg. DO NOT EDIT.
//
// Version: 0.0.1
//
// Source: pingpong.scg
//
// SHA: 35e4b47b4c5907add4198757648b3615a4e5b0ccbca0c097ac60201915a4e679
//
// Date: 2024-06-08T14:58:32-04:00

package pingpong

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/kbirk/scg/pkg/rpc"
	"github.com/kbirk/scg/pkg/serialize"
)

type Ping struct {
	Count int32 `json:"count"`
}

func (p *Ping) ToJSON() ([]byte, error) {
	jsonData, err := json.Marshal(p)
	if err != nil {
		return nil, err
	}
	return jsonData, nil
}

func (p *Ping) FromJSON(data []byte) error {
	err := json.Unmarshal(data, p)
	if err != nil {
		return err
	}
	return nil
}

func (p *Ping) ToBytes() []byte {
	size := p.CalcByteSize()
	writer := serialize.NewFixedSizeWriter(size)
	p.Serialize(writer)
	return writer.Bytes()
}

func (p *Ping) FromBytes(bs []byte) error {
	return p.Deserialize(serialize.NewReader(bs))
}

func (p *Ping) ByteSize() int {
	return p.CalcByteSize()
}

func (p *Ping) CalcByteSize() int {
	size := 0
	size += serialize.CalcByteSizeInt32(p.Count)
	return size
}

func (p *Ping) Serialize(writer *serialize.FixedSizeWriter) {

	serialize.SerializeInt32(writer, p.Count)
}

func (p *Ping) Deserialize(reader *serialize.Reader) error {
	var err error
	err = serialize.DeserializeInt32(&p.Count, reader)
	if err != nil {
		return err
	}
	return nil
}

type PingRequest struct {
	Ping Ping `json:"ping"`
}

func (p *PingRequest) ToJSON() ([]byte, error) {
	jsonData, err := json.Marshal(p)
	if err != nil {
		return nil, err
	}
	return jsonData, nil
}

func (p *PingRequest) FromJSON(data []byte) error {
	err := json.Unmarshal(data, p)
	if err != nil {
		return err
	}
	return nil
}

func (p *PingRequest) ToBytes() []byte {
	size := p.CalcByteSize()
	writer := serialize.NewFixedSizeWriter(size)
	p.Serialize(writer)
	return writer.Bytes()
}

func (p *PingRequest) FromBytes(bs []byte) error {
	return p.Deserialize(serialize.NewReader(bs))
}

func (p *PingRequest) ByteSize() int {
	return p.CalcByteSize()
}

func (p *PingRequest) CalcByteSize() int {
	size := 0
	size += p.Ping.CalcByteSize()
	return size
}

func (p *PingRequest) Serialize(writer *serialize.FixedSizeWriter) {

	p.Ping.Serialize(writer)
}

func (p *PingRequest) Deserialize(reader *serialize.Reader) error {
	var err error
	err = p.Ping.Deserialize(reader)
	if err != nil {
		return err
	}
	return nil
}

type Pong struct {
	Count int32 `json:"count"`
}

func (p *Pong) ToJSON() ([]byte, error) {
	jsonData, err := json.Marshal(p)
	if err != nil {
		return nil, err
	}
	return jsonData, nil
}

func (p *Pong) FromJSON(data []byte) error {
	err := json.Unmarshal(data, p)
	if err != nil {
		return err
	}
	return nil
}

func (p *Pong) ToBytes() []byte {
	size := p.CalcByteSize()
	writer := serialize.NewFixedSizeWriter(size)
	p.Serialize(writer)
	return writer.Bytes()
}

func (p *Pong) FromBytes(bs []byte) error {
	return p.Deserialize(serialize.NewReader(bs))
}

func (p *Pong) ByteSize() int {
	return p.CalcByteSize()
}

func (p *Pong) CalcByteSize() int {
	size := 0
	size += serialize.CalcByteSizeInt32(p.Count)
	return size
}

func (p *Pong) Serialize(writer *serialize.FixedSizeWriter) {

	serialize.SerializeInt32(writer, p.Count)
}

func (p *Pong) Deserialize(reader *serialize.Reader) error {
	var err error
	err = serialize.DeserializeInt32(&p.Count, reader)
	if err != nil {
		return err
	}
	return nil
}

type PongResponse struct {
	Pong Pong `json:"pong"`
}

func (p *PongResponse) ToJSON() ([]byte, error) {
	jsonData, err := json.Marshal(p)
	if err != nil {
		return nil, err
	}
	return jsonData, nil
}

func (p *PongResponse) FromJSON(data []byte) error {
	err := json.Unmarshal(data, p)
	if err != nil {
		return err
	}
	return nil
}

func (p *PongResponse) ToBytes() []byte {
	size := p.CalcByteSize()
	writer := serialize.NewFixedSizeWriter(size)
	p.Serialize(writer)
	return writer.Bytes()
}

func (p *PongResponse) FromBytes(bs []byte) error {
	return p.Deserialize(serialize.NewReader(bs))
}

func (p *PongResponse) ByteSize() int {
	return p.CalcByteSize()
}

func (p *PongResponse) CalcByteSize() int {
	size := 0
	size += p.Pong.CalcByteSize()
	return size
}

func (p *PongResponse) Serialize(writer *serialize.FixedSizeWriter) {

	p.Pong.Serialize(writer)
}

func (p *PongResponse) Deserialize(reader *serialize.Reader) error {
	var err error
	err = p.Pong.Deserialize(reader)
	if err != nil {
		return err
	}
	return nil
}

const (
	pingPongID  uint64 = 8327373094710716227
	ping_PingID uint64 = 16843147157235268489
)

type PingPongServer interface {
	Ping(context.Context, *PingRequest) (*PongResponse, error)
}

func RegisterPingPongServer(server *rpc.Server, pingPongServer PingPongServer) {
	server.RegisterServer(pingPongID, &pingPong_Stub{pingPongServer})
}

type pingPong_Stub struct {
	server PingPongServer
}

func (s *pingPong_Stub) handlePing(ctx context.Context, requestID uint64, reader *serialize.Reader) []byte {
	req := &PingRequest{}
	err := req.Deserialize(reader)
	if err != nil {
		return rpc.RespondWithError(requestID, err)
	}

	resp, err := s.server.Ping(ctx, req)
	if err != nil {
		return rpc.RespondWithError(requestID, err)
	}

	return rpc.RespondWithMessage(requestID, resp)
}

func (s *pingPong_Stub) HandleWrapper(ctx context.Context, requestID uint64, reader *serialize.Reader) []byte {
	var methodID uint64
	err := serialize.DeserializeUInt64(&methodID, reader)
	if err != nil {
		return rpc.RespondWithError(requestID, err)
	}

	switch methodID {
	case ping_PingID:
		return s.handlePing(ctx, requestID, reader)
	default:
		return rpc.RespondWithError(requestID, fmt.Errorf("unrecognized methodID %d", methodID))
	}
}

type PingPongClient struct {
	client *rpc.Client
}

func NewPingPongClient(client *rpc.Client) *PingPongClient {
	return &PingPongClient{
		client: client,
	}
}

func (c *PingPongClient) Ping(ctx context.Context, req *PingRequest) (*PongResponse, error) {
	reader, err := c.client.Call(ctx, pingPongID, ping_PingID, req)
	if err != nil {
		return nil, err
	}

	resp := &PongResponse{}
	err = resp.Deserialize(reader)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
